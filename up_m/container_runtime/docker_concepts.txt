Docker использует архитектуру клиент-сервер. Docker клиент общается с демоном Docker, который
берет на себя тяжесть создания, запуска, распределения ваших контейнеров. Клиент и сервер
общаются через сокет или через RESTful API.

Из чего состоит docker?

1) Образы (images)
  Образы - это компонента сборки docker.

  Docker image - это read-only шаблон для создания Docker-контейнеров. Представляет собой
  исполняемый пакет, содержащий все необходимое для запуска приложения: код, среду
  выполнения, библиотеки, переменные окружения и файлы конфигурации.

  Управление версиями Docker-образа осуществляется с помощью тегов и хешей.

  При запуске контейнерной среды внутри контейнера создается копия файловой системы (docker
  образа) для чтения и записи.

  Docker-образ состоит из слоев. Каждое изменение записывается в новый слой:
  - при загрузке или скачивании Docker-образа, операции производятся только с теми слоями,
    которые были изменены;

  - слои исходного Docker-образа являются общими между всеми его версиями и не дублируются.

2) Реестр (registry)
  Реестры - это компонента распространения.

  Docker registry - это по сути репозиторий для docker images, он хранит образы (по типу как
  github репозиторий хранит ваш код).

  Есть публичные и приватные реестры, из которых можно скачать либо загрузить образы.
  
  Публичный Docker-реестр - это Docker Hub. Там хранится огромная коллекция образов.
  Образы могут быть созданы вами или вы можете использовать образы созданные другими.

  Пример:
    - есть сервер со статическим ip, поднимаем на нём контейнер с docker registry и он
      выполняет роль репозитория;
    - пушим в него нужные docker images и обращаясь к этому репозиторию можем скачать любой
      интересующий нас образ и использовать.

3) Контейнеры (containers)
  Контейнеры - это компонента работы.

  Container - это виртуализированная среда выполнения, в которой пользователь может
  изолировать приложение от хостовой системы. Контейнер представляет собой компактный
  портативный хост, в котором можно быстро и легко запустить приложение.

  Каждый контейнер создается из образа. Контейнеры могут быть созданы, запущены,
  остановлены, перенесены или удалены.

  Контейнеры работают автономно, изолированно от основной системы и других контейнеров,
  и потому ошибка в одном из них не влияет на другие работающие контейнеры.

  Важной особенностью контейнера является стандартизация вычислительной среды,
  работающей внутри контейнера. Это не только гарантирует, что ваше приложение работает
  в идентичных условиях, но и упрощает обмен данными с другими партнерами по команде.

4) Итог
  - можем создавать образы, в которых находятся наши приложения;
  - можем распространять образы через Docker Hub или другой реестр образов;
  - можем создавать контейнеры из образов, для запуска приложений.