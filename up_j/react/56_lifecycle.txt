Функции жизненного цикла

В процессе работы компонент проходит через ряд этапов жизненного цикла.
На каждом из этапов вызывается определённая функция, в которой мы можем определить
какие-либо действия.

Монтирование:

  1) constructor(props) - конструктор, в котором происходит начальная инициализация компонента.

  2) [UNSAFE_]componentWillMount() - вызывается перед рендером компонента (УСТАРЕЛ, поддерживается до версии 17).

  3) static getDerivedStateFromProps(props, state) - вызывается непосредственно перед вызовом метода render,
    как при начальном монтировании, так и при последующих обновлениях.
    Он должен вернуть объект для обновления состояния или null, чтобы ничего не обновлять.

  4) render() - рендеринг компонента;

  5) componentDidMount() - вызывается после рендеринга компонента.

Обновление:

  1) static getDerivedStateFromProps()

  2) shouldComponentUpdate(nextProps, nextState) - вызывается каждый раз при обновлении объекта props или state.
    В качестве параметров передаются новые props и state. Должен возврфщать true (обновление необходимо) или
    false (игнорировать обновление). В случае false последующие методы lifecycle не сработают.

  3) [UNSAFE_]componentWillUpdate(nextProps, nextState) - вызывается перед обновлением (УСТАРЕЛ, поддерживается до версии 17).

  4) render()

  15) getSnapshotBeforeUpdate() - вызывается прямо перед этапом «фиксирования» (например, перед добавлением в DOM).
    Он позволяет вашему компоненту брать некоторую информацию из DOM (например, положение прокрутки) перед её возможным изменением.
    Любое значение, возвращаемое этим методом жизненного цикла, будет передано как параметр componentDidUpdate().

  6) componentDidUpdate(prevProps, prevState, snapshot) - вызывается сразу после обновления. Не вызывается при первом рендере.

Размонтирование:

  1) componentWillUnmount() - перед удалением компонента из DOM.

Обработка ошибок:
  
  1) static getDerivedStateFromError() - после возникновения ошибки у компонента-потомка.
    Он получает ошибку в качестве параметра и возвращает значение для обновления состояния.

  2) componentDidCatch(error, info) - после возникновения ошибки у компонента-потомка, во время этапа «фиксации»,
    поэтому здесь можно использовать побочные эффекты. Метод можно использовать для логирования ошибок.

    Получает два параметра:
      - error — перехваченная ошибка;
      - info — объект с ключом componentStack, содержащий информацию о компоненте, в котором произошла ошибка.
