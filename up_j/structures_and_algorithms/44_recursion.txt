Рекурсивная функция — это такая функция, которая вызывает саму себя.

Пример рекурсии:
  const factorial = (n) => {
    if (n === 1) {
      return 1;
    } else {
      return n * factorial(n - 1);
    }
  }

Граничный и рекурсивный случай
  Если рекурсивную функцию не ограничить, она будет вызываться до бесконечности.
  Она всегда должна знать, когда ей нужно остановиться. В рекурсивной функции
  должны есть два случая: рекурсивный и граничный. Рекурсивный – это когда
  функция вызывает саму себя, а граничный – когда функция перестает себя вызывать.
  Наличие граничного случая и предотвращает зацикливание.

Стек вызовов
  LIFO (last in, first out, «последним пришёл — первым ушёл») — способ организации
  и манипулирования данными относительно времени и приоритетов. В структурированном
  линейном списке, организованном по принципу LIFO, элементы могут добавляться и
  выбираться только с одного конца, называемого «вершиной списка».

  Стек вызовов (call stack) — стек, хранящий информацию для возврата управления из
  подпрограмм (функций) в программу или подпрограмму (при вложенных или рекурсивных вызовах).

  Пример:
    1) В функции происходит рекурсивный вызов (1), данные текущей функции помещаются в стек
      для возврата к текущей точке выполнения в дальнейшем, управление передаётся
      вновь созданному экземпляру функции

      |     |
      |     |
      |     |
      |  1  | <- 1
      -------

    2) Процедура повторяется и происходит новый рекурсивный вызов (2), данные текущего вызова
      так же помещаются в стек

      |     |
      |     |
      |  2  | <- 2
      |  1  |
      -------
    
    3) И снова рекурсивный вызов (3)

      |     |
      |  3  | <- 3
      |  2  |
      |  1  |
      -------

    4) Последний рекурсивный вызов (3) переходит на граничный случай, функция возвращает результат,
      передаёт управление предыдущей точке выполнения, хранящейся в стеке на уровень ниже,
      данные текущего вызова удаляются из стека

      |     |
      |  3  | 3 ->
      |  2  | <- return x;
      |  1  |
      -------

    5) Вызов (2) так же переходит на граничный случай, возвращает результат "функции-родителю" (1)
      и удаляется из стека

      |     |
      |     |
      |  2  | 2 ->
      |  1  | <- return x;
      -------

    6) (1) завершает работу и возвращает результат.

      |     |
      |     |
      |     |
      |  1  | 1 ->
      ------- -> return x;