Promise - это объект, предоставляющий удобный способ организации асинхронного кода.

Вместо конечного результата асинхронного метода возвращается "обещание" получить результата
в некоторый момент в будущем.

1) Основа
  У объекта promise, возвращаемого конструктором new Promise, есть внутренние свойства:
    - state - состояние промиса на данный момент (pending, fulfilled, rejected);

    - result - результат (undefined, value, error).

  state - promise может находится в трёх состояниях:
    - pending (ожидание) - начальное состояние, не исполнен, не отклонен, ожидает результата, result = undefined;

    - fulfilled (исполнен) - выполнен успешно, result = value;

    - rejected (отклонен) - завершено с ошибкой, result = error.

  example:
    const promise = new Promise((resolve, reject) => {
      console.log('started')
      setTimeout(() => {
        console.log('setTimeout ended')
        resolve({status: 'OK'})
      }, 2000)
    });

    promise
      .then(data => console.log(data))
      .catch(err => console.log(err))
      .finally(() => console.log('finally'));

    вывод:
      - started
      - setTimeout ended
      - {status: "OK"}
      - finally

    then - выполнится в случае успеха (срабатывания resolve), получает на вход данные из resolve;
    catch - выполнится в случае ошибки (срабатывания reject), получает на вход данные из reject;
    finally - выполнится в любом случае после завершения промиса.

2) Цепочка (chain)
  Идея цепочки в том - что результат промиса будет передаваться по цепочке обработчиков '.then'

    new Promise((resolve, reject) => {
      resolve(1)
    }).then((result) => {
      alert(result);
      return result*2;
    }).then((result) => {
      alert(result);
      return result*3;
    });

3) Promise API
  Класс Promise имеет несколько статических методов:
    - Promise.all([...]) - возвращает промис, который выполнится тогда, когда будут выполнены все промисы,
      переданные в виде перечисляемого аргумента, или отклонено любое из переданных промисов. Порядок
      элементов массива результатов в точности соответствует порядку исходных промисов;

    - Promise.allSettled([...]) - возвращает промис, который исполняется когда все полученные промисы
      завершены (исполнены или отклонены), содержащий массив результатов исполнения полученных промисов;

    - Promise.race([...]) - возвращает первый выполненный или отклонённый промис, в зависимости от того,
      с каким результатом он завершится, со значением или причиной отклонения этого промиса. Остальные
      промисы игнорируются;
    
    - Promise.resolve(value), Promise.reject(reason) - возвращают промис исполненный с конкретный значением
      либо отклонённый по конкретной причине (редко используются).

4) async/await - специальный синтаксис для работы с промисами
  По сути это "синтаксический сахар" для получения результата промиса, более наглядный чем then.

  - async - объявление async function определяет асинхронную функцию, которая возвращает объект AsyncFunction;

  - await - заставит интерпретатор  JS ждать до тех пор, пока промис справа от await не выполнится.
    после чего вернёт его результат и выполнение кода продолжится. 