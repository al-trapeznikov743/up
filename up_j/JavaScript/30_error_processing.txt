Обработка ошибок

Обычно скрипт в случае ошибки «падает» (сразу же останавливается), с выводом ошибки в консоль.
Но есть синтаксическая конструкция try..catch, которая позволяет «ловить» ошибки и вместо
падения делать что-то более осмысленное.

try {

  // код...

} catch (err) {

  // обработка ошибки

} finally {
   ... выполняется всегда после try либо после catch ...
}

У кода есть два пути выполнения:
- если вы ответите на вопрос «Сгенерировать ошибку?» утвердительно, то try -> catch -> finally;
- если ответите отрицательно, то try -> finally.

1. выполняется код внутри блока try {...};
2. если в нём нет ошибок, то блок catch(err) игнорируется: выполнение доходит до конца try
  и потом далее, полностью пропуская catch;
3. если же в нём возникает ошибка, то выполнение try прерывается, и поток управления переходит
  в начало catch(err). Переменная err (можно использовать любое имя) содержит объект ошибки с
  подробной информацией о произошедшем.

  !try..catch работает синхронно!

Объект ошибки
  Когда возникает ошибка, JavaScript генерирует объект, содержащий её детали. Затем этот объект
  передаётся как аргумент в блок catch.

Генерация собственных ошибок - throw
  Оператор throw генерирует ошибку
  - throw <объект ошибки>

  Объекты ошибок содержат следующие свойства:
  - message – понятное человеку сообщение;
  - name – строка с именем ошибки (имя конструктора ошибки);
  - stack (нестандартное, но хорошо поддерживается) – стек на момент ошибки.

  В JavaScript есть множество встроенных конструкторов для стандартных ошибок: Error, SyntaxError,
  ReferenceError, TypeError и другие. Можно использовать и их для создания объектов ошибки.

  let error = new Error(message);
  let error = new SyntaxError(message);
  let error = new ReferenceError(message);

  Пример:

    let json = '{ "age": 30 }'; // данные неполны

    try {

      let user = JSON.parse(json); // <-- выполнится без ошибок

      if (!user.name) {
        throw new SyntaxError("Данные неполны: нет имени"); // (*)
      }

      alert( user.name );

    } catch(e) {
      alert( "JSON Error: " + e.message ); // JSON Error: Данные неполны: нет имени
    }

Проброс исключения
  Блок catch должен обрабатывать только те ошибки, которые ему известны, и «пробрасывать» все остальные.

  Техника «проброс исключения» выглядит так:
  - Блок catch получает все ошибки;
  - В блоке catch(err) {...} мы анализируем объект ошибки err;
  - Если мы не знаем как её обработать, тогда делаем throw err.

  