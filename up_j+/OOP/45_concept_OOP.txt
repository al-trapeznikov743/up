Объектно-ориентированное программирование - методология программирования, основаннная
на представлении программы в виде совокупности взаимодействующих объектов, каждый из
которых является экземпляром определённого класса, а классы образуют иерархию наследования.
(это по классической схеме, на деле объектно-ориентированный подход возможен и без классов)

1) Принципы ООП

  Абстракция:
    - выделение главных, наиболее значимых характеристик предмета (в текущем контексте)
      и отбрасывание второстепенных, незначительных.

  Инкапсуляция:
    - это принцип, согласно которому любой класс и, если в более широком смысле, любая часть
      системы должны рассматриваться как "черный ящик". Пользователь класса или подсистемы
      должен видеть только интерфейс (т.е. список декларируемых свойств и методов) и не
      вникать во внутреннюю реализацию.

      Инкапсуляция позволяет минимизировать число связей между классами и подсистемами и,
      соответственно, упростить независимую реализацию и модификацию классов и подсистем.

  Наследование:
    - это возможность наследовать один класс от другого с сохранением всех свойств и методов
      класса-предка (суперкласса), добавляя при необходимости новые свойства и методы.

      Наследование является самым переоценённым принципом. Наследование - это способ выразить
      свойства реального мира как иерархичность, а не способ переиспольховать код, стоит об
      этом не забывать.

  Полиморфизм (многообразие):
    - свойство системы, позволяющее иметь множество реализаций одного интерфейса...
    - возможность использования одного и того же кода с разными типами аргументов...
    - возможность применения одноимённых методов с одинаковыми или различными наборами
      параметров в одном классе или в группе классов, связанных отношением наследования.

2) Понятия

  Класс:
    - способ описания сущности. Определяет каким должно быть состояние объекта, поведение,
      зависящее от этого состояния, а так же правила взаимодействия с данной сущностью (контракт).

      Таким образом, класс - это описание того, какими свойствами и поведение будет обладать
      объект.

  Объект (экземпляр класса):
    - отдельный представитель класса, имеющий конкретное собственное состояние и поведение,
      полностью определяемое классом.

  Интерфейс:
    - программная/синтаксическая структура, определяющая отношение между объектами, которые
      разделяют определённое поведенческое множество и не связаны никак иначе.
      
      При проектировании классов, разработка интерфейса тождественна разработке спецификации
      (множества методов, которые каждый класс, использующий интерфейс, должен реализовывать).

  Абстрактный класс:
    - базовый класс, который не предполагает создания экземпляров. Абстрактные классы реализуют
      на практике один из принципов ООП — полиморфизм. Абстрактный класс может содержать
      (и не содержать) абстрактные методы и свойства. Абстрактный метод не реализуется для
      класса, в котором описан, однако должен быть реализован для его неабстрактных потомков.

      Абстрактный класс наряду с обычными методами содержит в себе абстрактные методы без
      имплементации (с сигнатурой, но без кода), которые обязан имплементировать программист,
      задумавший создать класс-потомок. Абстрактные классы не обязательны, но они помогают
      установить контракт, обязующий имплементировать определенный набор методов, дабы уберечь
      программиста с плохой памятью от ошибки имплементации.

      Абстрактный класс - интерфейс (различия):

        Абстрактный класс — это класс, у которого не реализован один или больше методов.

        Интерфейс — это абстрактный класс, у которого ни один метод не реализован, все они
        публичные и нет переменных класса.

        Можно считать, что любой интерфейс - это уже абстрактный класс, но не наоборот.

  Абстрактные члены классов:
    - класс может иметь абстрактные члены классов, которые определяются с помощью ключевого
      слова abstract и не имеют никакого функционала. В частности, абстрактными могут быть:
      методы, свойства, индексаторы, события.

      Если класс имеет хотя бы одный абстрактный метод (или абстрактные свойство, индексатор,
      событие), то этот класс должен быть определен как абстрактный.

      Производный класс обязан переопределить и реализовать все абстрактные методы и свойства,
      которые имеются в базовом абстрактном классе.

  Перегрузка методов:
    - приём программирования, который позволяет разработчику в одном классе для методов с
      разными параметрами использовать одно и то же имя. В этом случае мы говорим, что метод
      перегружен.

      Иногда возникает необходимость создать один и тот же метод, но с разным набором параметров.
      И в зависимости от имеющихся параметров применять определенную версию метода. Такая
      возможность еще называется перегрузкой методов (method overloading).

      При вызове подобного метода класса, конкретная вызываемая реализация метода определяется
      по типу и количеству аргументов, переданных притекущем вызове.

      Перегрузка метода как раз заключается в том, что методы имеют разную сигнатуру, в которой
      совпадает только название метода. То есть методы должны отличаться по: количеству
      параметров, типу параметров, порядку параметров, модификаторам параметров.

  Поля, свойства:
    - поле класса - переменная, связанная с классом или объектом (хранящаяся в нём).

      По области видимости поля различаются на:
        - public - общедоступные;
        - protected - доступные только для потомков;
        - private - доступные только внутри класса.

    - свойство класса - это способ доступа к внутреннему состоянию объекта, имитирующий поле.
      Обращение к свойству объекта выглядит так же, как и обращение к полю, но, в действительности,
      реализовано через вызов функции. При попытке задать значение свойства вызывается метод
      называемый сеттером (setter). А при попытке получить значение свойства — геттер (getter).

  Геттеры, сеттеры (get - получать, set - устанавливать):
    - методы, используемые для получения доступа к полям класса и гарантирующие корректность и
      безопасность действий с полем класса. Метод get - для получения значения поля, метод set -
      для изменения значения поля. Т.К. обращение к полю класса напрямую - очень грязная практика.



  

      
