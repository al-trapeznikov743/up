ACID описывает требования к транзакционной системе (например, к СУБД), обеспечивающие
наиболее надёжную и предсказуемую её работу.

1) Atomicity (атомарность)
  Aтомарность гарантирует, что никакая транзакция не будет зафиксирована в системе
  частично. Будут либо выполнены все её подоперации, либо не выполнено ни одной.

2) Consistency (согласованность)
  Транзакция, достигающая своего нормального завершения (EOT — end of transaction,
  завершение транзакции) и тем самым фиксирующая свои результаты, сохраняет
  согласованность базы данных. Другими словами, каждая успешная транзакция по
  определению фиксирует только допустимые результаты.

  Есть такое определение транзакции: «Упорядоченное множество операций, переводящих
  базу данных из одного согласованного состояния в другое». То есть до выполнения
  операции и после база остается консистентной.

  Пример - в БД есть несколько таблиц:
    - client;
    - phone;
    - address.
  
  И при добавлении нового пользователя система отправляет в БД 3 запроса:
    - insert into client…;
    - insert into phone…;
    - insert into address…;

  В этом случае лучше сделать одну транзакцию, внутри которой будут эти 3 запроса.

  Атомарность гарантирует, что не получится такого, что адрес с телефоном сохранились,
  а сам клиент — нет. Консистентность же в этом случае - это состояние базы до и
  после проведения транзакции. Т.Е. нет такого чтобы данные в phone записались, а
  данные в client нет, т.к. в таком случае база будет несогласованной, неконсистентной,
  телефон будет "висеть в воздухе", и нельзя будет определить к какому клиенту он
  относится, ведь клиента нет.

3) Isolation (изолированность)
  Во время выполнения транзакции параллельные транзакции не должны оказывать влияния
  на её результат. Изолированность — требование дорогое, поэтому в реальных БД
  существуют режимы, не полностью изолирующие транзакцию - уровни изолированности.

  - Read uncommitted (читать незафиксированные)
      Уровень, имеющий самую плохую согласованность данных, но самую высокую скорость
      выполнения транзакций. Название уровня говорит само за себя — каждая транзакция
      видит незафиксированные изменения другой транзакции (феномен грязного чтения).

  - Read committed (читать только зафиксированные)
      Для этого уровня параллельно исполняющиеся транзакции видят только зафиксированные
      изменения из других транзакций. Таким образом, данный уровень обеспечивает защиту
      от грязного чтения.

  - Repeatable read (повторяемое чтение)
      Уровень, при котором читающая транзакция «не видит» изменения данных, которые
      были ею ранее прочитаны. При этом никакая другая транзакция не может изменять
      данные, читаемые текущей транзакцией, пока та не окончена.

  - Serializable (упорядочиваемость)
      Самый высокий уровень изолированности; транзакции полностью изолируются друг
      от друга, каждая выполняется так, как будто параллельных транзакций не
      существует. Только на этом уровне параллельные транзакции не подвержены
      эффекту «фантомного чтения».

    В большинстве приложений уровень изолированности редко меняется и используется
    значение по умолчанию (например, в MySQL это repeatable read, в PostgreSQL —
    read committed).

4) Durability (надёжность, прочность)
  Независимо от проблем на нижних уровнях (к примеру, обесточивание системы или сбои в
  оборудовании) изменения, сделанные успешно завершённой транзакцией, должны остаться
  сохранёнными после возвращения системы в работу. Другими словами, если пользователь
  получил подтверждение от системы, что транзакция выполнена, он может быть уверен,
  что сделанные им изменения не будут отменены из-за какого-либо сбоя.
  