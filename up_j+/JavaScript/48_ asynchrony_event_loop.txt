Event loop, setTimeout, setInterval

В Event Loop в языке JavaScript заключается секрет асинхронного программирования.

Код JavaScript работает только в однопоточном режиме. Это означает, что в один и тот
же момент может происходить только одно событие. С одной стороны это хорошо, так как
такое ограничение значительно упрощает процесс программирования, здесь не возникает
проблем параллелизма. Но, как правило, в большинстве браузеров в каждой из вкладок
существует свой цикл событий. Среда управляет несколькими параллельными циклами. 

Существует бесконечный цикл событий, в котором JavaScript движок ожидает свою задачу,
выполняет ее и ждет новую. Алгоритм работы движка мы можем видеть при просмотре
любой веб-страницы. Он включается в работу тогда, когда необходимо обработать
какое-либо событие или скрипт. Схема работы выглядит следующим образом:

  - JavaScript бездействует и ждет свою задачу;
  - Как только задачи появляются, движок начинает их выполнение, начиная с первой
    поступившей;
  - Если поступила новая задача, но движок занят выполнением предыдущей — она
    ставится в очередь.

Stack - поток выполнения JS кода. Event loop осуществляет контроль стека вызовов.
Если стек пуст - цикл событий возьмёт первое событие из очереди и отправит его в стек,
который его запустит. При вызове нового метода вверху стека выделяется отдельный блок
памяти. тек вызовов отвечает за отслеживание всех операций в очереди, которые должны
быть выполнены. При завершении очереди она извлекается из стека.

Queue (очередь). Очередь событий отвечает за отправку новых функций на трек обработки.
Он следует структуре данных очереди, чтобы поддерживать правильную последовательность,
в которой все операции должны отправляться на выполнение.

Web API. Не являются частью JavaScript. Каждый раз, когда вызывается асинхронная
функция, она отправляется в API браузера. На основе команды, полученной из стека
вызовов, API запускает собственную однопоточную операцию.

=====================================================================================

setTimeout - позволяет вызвать функцию один раз через определённый интервал времени.

setInterval - позволяет вызывать функцию регулярно, повторяя вызов через определённый
интервал времени.

Эти методы не являются частью спецификации JavaScript. Но большинство сред выполнения
JS-кода имеют внутренний планировщик и предоставляют доступ к этим методам. В
частности, они поддерживаются во всех браузерах и Node.js.

Цикл событий (Event loop) работает в Callback Queue. Он осуществляет итерацию по списку
событий в очереди и, когда стек освобождается, закидывает их туда на выполнение.

while(queue.waitForMessage()) {
  queue.processNextMessage();
}

Event loop с Web API работают не только с setTimeout, setInterval. Через них
работают все асинхронные операции, слушатели событий так же добавляются в web API и
ждут события на выполнение, добавления в стек и исполнения через Event loop.

Пример работы Event loop + Web API:
  ---------------------------------------------------------------------------
  console.log('start'); // действие A

  setTimeout(() => console.log('setTimeout callback'), 1000); // действие B

  console.log('end'); // действие C

  some code // действие D
  ---------------------------------------------------------------------------

  1) "действие A" попадает в Call Stack, тут же выполняется и удаляется из стека;

  2) "действие B" попадает в Call Stack, setTimeout регистрируется и удаляется из стека,
      callback (некая анонимная функция) передаётся web api, которая и выполняет этот
      setTimeout - ждёт завершения счетчика;

  3) "действие C" попадает в Call Stack и тут же выполняется;

  4) по завершению счетчика callback "действия B" попадает в Callback Queue (очередь)
      и ждёт выполнения всех действий находящихся на данный момент в стеке вызовов;

  5) "действие D" (какой-либо ещё код) завершает свои действия и удаляется из стека;

  6) callback "действия B" (находящийся в Callback Queue - очереди) попадает в стек
      после его освобождения и выполняется.

  Получаем вывод в консоль:
    - start
    - end
    - [логи some code]
    - setTimeout callback

========================================================================================

Idle (простой системы, бездействие)
  Это JS API позволяющий узнать состояние системы (действие / бездействие (простой системы)).

  - idle.IdleState - строка, описывающая состояние простоя устройства;

  - idle.queryState() - возвращает "locked", если система заблокирована, "idle" если
    пользователь не ввел никаких данных в течение заданного количества секунд или "active",
    если система активна;

  - idle.setDetectionInterval() - устанавливает интервал, используемый для определения, когда
    система находится в состоянии простоя для событий idle.onStateChanged;

  - idle.onStateChanged - запускается, когда система меняет состояние.

window.requestIdleCallback() !экспериментальная технология!
  - ставит в очередь функцию, которая будет вызываться во время периодов простоя браузера. Это
  позволяет разработчикам выполнять фоновую и низкоприоритетную работу в цикле основного
  события, без воздействия такими критично долгими событиями, как анимация и обработка ввода.

  Возвращает ID, который может быть использован для отмены колбэка, передав значение в метод
  window.cancelIdleCallback()

============================================================================================

https://www.youtube.com/watch?v=vIZs5tH-HGQ&t=64s
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/idle
https://developer.mozilla.org/ru/docs/Web/API/Window/requestIdleCallback

 