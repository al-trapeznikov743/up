Классы в JS были введены в ECMAScript 2015 и представляют собой синтаксический сахар
над существующим в JS механизмом прототипного наследования. Синтаксис классов не
вводит новую объектно-ориентированную модель, а предоставляет более простой и
понятный способ создания объектов и организации наследования.

"По сути свойства представляют доступные извне или публичные поля класса. Т.Е. стоит
понимать, что свойства и публичные поля - это одно и то же."

1) Статические методы и свойства
  Ключевое слово static, определяет статический метод или свойства для класса.
  
  Статические методы и свойства вызываются без инстанцирования их класса, и
  не могут быть вызваны у экземпляров (instance) класса. Т.Е. статические методы
  используются для реализации функций, принадлежащих классу целиком, вообще, и при
  этом не относящимся к каким-либо отдельным объектам.

  Пример:
    class Point {
      constructor(x, y) {
        this.x = x;
        this.y = y;
      }

      static displayName = "Точка";
      static distance(a, b) {
        const dx = a.x - b.x;
        const dy = a.y - b.y;

        return Math.hypot(dx, dy);
      }
    }

2) Геттеры, сеттеры (get - получать, set - устанавливать)
  "Это методы, используемые для получения доступа к полям класса и гарантирующие
  корректность и безопасность действий с полем класса. Метод get - для получения
  значения поля, метод set - для изменения значения поля. Т.К. обращение к полю
  класса напрямую - очень грязная практика."

  По сути это специальные свойства, которые внутри объекта работают как методы,
  а снаружи работают как свойства.

  class Point {
    constructor(isCompleted) {
      this._isCompleted = isCompleted;
    }

    get isCompleted() {
      return this._isCompleted;
    }

    set isCompleted(value) {
      this._isCompleted = value;
    }
  }

3) Область видимости. Обращение к полям и методам внутри класса. Слово this.
  Что если мы хотим в методах класса обратиться к полям класса или к другим его
  методам? В этом случае перед именем поля/свойства или метода указывается ключевое
  слово this, которое в данном случае указывает на текущий объект.

4) Примеси (mixins)
  "Концепция примесей предполагает что создаётся либо класс либо объект с набором
  предопределённых методов с реализацией по умолчанию, а затем содержимое этого
  класса/объекта компируется в соответствующие классы (без наследования). Далее
  методы, которые нужно реализовать, переопределяются по своему в каждом конкретном
  классе."

  В JavaScript можно наследовать только от одного объекта. Объект имеет
  единственный [[Prototype]]. И класс может расширить только один другой класс.

  Иногда это может ограничивать нас. Для таких случаев существуют примеси.

  По определению из Википедии, примесь – это класс, методы которого предназначены
  для использования в других классах, причём без наследования от примеси.

  Другими словами, примесь определяет методы, которые реализуют определённое
  поведение. Мы не используем примесь саму по себе, а используем её, чтобы
  добавить функциональность другим классам.

  С примесями могут возникнуть конфликты, если они перезаписывают существующие
  методы класса. Стоит помнить об этом и быть внимательнее при выборе имён для
  методов примеси, чтобы их избежать.

  let sayHiMixin = {
    sayHi() {
      alert(`Привет, ${this.name}`);
    },
    sayBye() {
      alert(`Пока, ${this.name}`);
    }
  };

  class User {
    constructor(name) {
      this.name = name;
    }
  }

  Object.assign(User.prototype, sayHiMixin);

  new User("Вася").sayHi();

