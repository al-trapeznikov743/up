Docker — программное обеспечение для автоматизации развёртывания и управления приложениями в
средах с поддержкой контейнеризации, контейнеризатор приложений. Позволяет «упаковать»
приложение со всем его окружением[en] и зависимостями в контейнер, который может быть
развёрнут на любой Linux-системе с поддержкой контрольных групп в ядре, а также предоставляет
набор команд для управления этими контейнерами.

Команды докер

  1) Вывод информации
    - docker version -- отображает информацию о версии docker (Client/Server);

    - docker ps -- отображает список запущенных контейнеров;

    - docker ps -a -- отображает список всех контейнеров;

    - docker images -- списком показывает все образы Docker, найденные на диске;

    - docker container inspect [OPTIONS] CONTAINER [CONTAINER...] -- отображение подробной
      информации об одном или нескольких контейнерах;

    - docker inspect [OPTIONS] NAME|ID [NAME|ID...] -- отображает подробную информацию
      после обращения к конкретному контейнеру/образу;

    - docker [container || image || volume || network] ls -- отобразить какой-либо из
      ресурсов docker;

    - docker logs [name or id] -- просмотр логов конкретного контейнера (даже остановленного
      в данный момент);

    - docker image history image_name -- отобразит "слои" конкретного образа, их названия,
      размер  и дату создания.

  2) Создание и запуск
    - docker build . -t my_image:1.0.0 -- создание образа;

    - docker create my_image -- создает контейнер из выбранного образа;

    - docker run -d -p 8080:80 my_image:1.0.0 -- создаёт новый контейнер на основе образа
      my_image затем запускает его. В данном случае с опубликованием внешнего порта 8080,
      который будет перенаправлять трафик на порт 80 внутри контейнера;

    - docker restart container -- выполняет перезапуск выбранного контейнера.

  3) Взаимодействие
    - docker exec [OPTIONS] CONTAINER COMMAND [ARG...] -- запускает новую команду в
      работающем контейнере;

    - docker exec -it [name or id] sh (it - interactive terminal) -- зайти в оболочку sh
      запущенного контейнера;

  4) Остановка, удаление, очистка
    - docker stop [name or id]  -- останавливает контейнер;

    - docker system prune -- очищает все не связанные с контейнерами ресурсы, в том числе
      контейнеры, образы, тома и сети;

    - docker system prune -a -- удаляет все остановленные контейнеры и не используемые
      образы (а не только образы, не связанные с контейнерами);

    - docker [container || image || volume || network] prune -- удалить какой-либо из не
      используемых ресурсов docker;

    - docker [container || image || volume || network] rm [source_name_or_id] -- удалить
      какой-либо из ресурсов docker.


Docker Compose
  - надстройка над докером, приложение написанное на Python, которое позволяет запускать
    множество контейнеров одновременно и маршрутизировать потоки данных между ними.

  Особенности:
    - декларативный подход к созданию контейнеров;

    - все необходимые контейнеры запускаются одной командой;

    - автоматическое создание необходимых образов на основании dockerfile каждого приложения;

    - автоматическое создание изолированной сети для взаимодействия контейнеров;

    - благодаря DNS возможно взаимодействие между контейнерами используя имена сервисов
      (каждому контейнеру docker выдает динамически IP адрес, имена сервисов задаются вами
      в yml файле конфигурации).

  1) Вывод информации
    - docker-compose logs -f [service name] -- посмотреть логи сервиса;

    - docker-compose ps -- вывести список контейнеров;

    - docker-compose images -- список образов.

  2) Создание и запуск
    - docker-compose up -d -- создаёт и запускает контейнеры (контейнеры, рабочую изолированную
      сеть и т.д.) на основе текущего docker-compose.yml - файла;

    - docker-compose up -d --build  -- опция "--build" -- дает инструкцию заново создать/собрать
      необходимые образы, это нужно делать каждый раз при изменении приложения и необходимости
      создать образы заново с уже внесёнными изменениями.

  3) Взаимодействие
    - docker-compose exec [service name] [command] -- выполнить команду в контейнере.

  3) Остановка
    - docker-compose down -- остановить проект.