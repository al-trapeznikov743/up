<Как используются у нас условия>

https://git.esoft.tech/ecosystem/condition.service/-/blob/develop/migrations/20220331105824_addMortgageDocumentTypesConditions.js#L34

1) Функция inserter принимает объект с четырьмя свойствами: targets, rules, entities, namespace
	* targets(условия) - массив объектов условий
		- key - ключ, в value идёт значение лежащее под ним, необходимое для выполнения условия;
		- value - значение;
		- operation - id операции (по дефолту 1);
		- returnAs - уникальное для данного списка имя условия.

	* rules(правила) - массив объектов правил
		- rule - собственно само правило, маска в виде "?&?|?";
		- returnAs - уникальное для данного списка имя правила;
		- variables - массив значения по порядку подставляющихся в rule, каждое значение - это
      результат условия из targets. Таким образом условия и правила стыкуются в общую картину.

	* entities(результат) - массив объектов результатов (массив с сущностями которые будут
    применяться для заданного правила)
		- rule - имя правила, которое должно вернуть true для возвращения сущностей данного
      результата;
		- entities - возвращаемые сущности;
		- entity - тип сущностей (енум).

	- namespace - строка с названием текущего файла для генерации уникального uuid’а чтобы можно
    было дропнуть добавленные правила.

	В нашем случае мы отправляем всего одно условие, одно правило и один результат. здесь нам
  необходимо вернуть массив ипотечных типов документов.

2) В DocumentsOverridenStore мы обращаемся в catalogs-business чтобы получить ипотечные типы документов

https://git.esoft.tech/ecosystem/frontend/-/blob/develop/src/stores/components/Mortgage/Ticket/Pages/Documents/DocumentsOverridenStore.js#L31

3) Далее переходя через getMortgageDocumentTypes мы попадаем в getCustomMortgageDocumentTypes,
  где и получаем типы документов через сервис условий

https://git.esoft.tech/ecosystem/catalogs.business.service/-/blob/develop/utils/getCustomMortgageDocumentTypes.js

*****************************************************************************************************


<Концепция: правило, условие, результат>

1) Вы отправляете на вход объект с некоторыми ключами и значениями;
2) Исходя из ваших ключей выбираются необходимые условия;
4) Условия проверяются на истину;
5) Выбираются правила, где присутствуют идшники выполнившихся условий из предыдущего шага;
6) Рассчитываются правила;
7) Выбираются сущности исходя из выполнившихся правил и возвращаются в ответ.

*****************************************************************************************************


<Правила использования>

Утилита conditionInserter - для вставки новых условий;
Функция inserter принимает на вход экземпляр knex и объект {targets, rules, entities, namespace}

Функция inserter возвращает объект вида:
	return {
	  getFilledData() {}, // метод возвращает сгенерированные данные для полей, правил, сущностей
	  async insert() {} // функция вставляет сгенерированные данные в entitiesForRules
	}

operation
  1 - проверка на равенство без приведения типов;
  2 - проверка на равенство без приведения типов;
  3 - побитовое умножение с приведением к инту;
  4 - отрицание предыдущего пункта.

В утилиты добавлены несколько функций для генерации uuid:
  - generate - непосредственно генерирует uuid;
  - baseNamespace - генерирует уникальное пространство имён для каждой миграции, чтобы не было
    коллизий uuid (обязательно необходимо передавать __filename);

Возможности оптимизации (options)
   Сейчас реализован только первый бит. Он нужен для оптимизации. Если он установлен, то если
   из всех условий сработало только это условие, дальнейший рассчет прекращается. Позволяет
   парсеру не обрабатывать правила лишний раз.

   Пример:
    https://git.esoft.tech/ecosystem/condition.service/-/blob/develop/migrations/20220517053928_addCadNumLandInClassOffices.js#L42

При добавлении нового правила в нем обязательно должно быть условие с ключом targetfields,
который указывает на принадлежность этого правила к чему-либо.

